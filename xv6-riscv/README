Name: Noah Miller

THe goal of this project was to implement the fair linux scheduler in the xv6 kernel using a cfs switch in order to update which scheduler to use. This was done with 2 helper functions weight_sum and shortest_runtime_proc, and 1 function cfs_scheduler. There were also 4 system calls implemented to make this possible, nice, getruntime, startcfs, stopcfs. 
The functions and system calls work as follows:
	int weight_sum() - Iterates through all processes to sum the weights, as transformed from a procs nice value in the weight_to_nice[40], of RUNNABLE processes and returns the sum.
	struct proc *shortest_runtime_proc() - Iterates through all RUNNABLE processes and returns the one with the smallest vruntime value in the proc. Will return 0 if no proc found.
	cfs_scheduler - Implements the linux fair scheduling policy. 
	int nice(int new_nice) - updates the caller's nice value to new_nice if new_nice is in [-20, 19]. Returns the nice value of the process after trying to update it.
	int getruntime(int *runtime, int *vruntime) - updates runtime with the value of the caller's runtime and vruntime with the caller's vruntime. Returns 0 on success.
	int startcfs(int latency, int max, int min) - Updates cfs to 1, stating to start using the cfs_scheduler. It also updates cfs_sched_latency to latency, cfs_max_timeslice to max and cfs_min_timeslice to min. It returns 1.
	int stopcfs(void) - Updates cfs to 0, stating to start using round robin scheduling, and returns 1.

Important Variables:
	int cfs - 1 if using cfs_scheduler, 0 if using round robin
	int cfs_sched_latency - the amount of time needed to run reach process once on average
	int cfs_max_timeslice - the maximum timeslice a single process is allowed to take
	int cfs_min_timeslice - the minimum timeslice a single process is allowed to take
	struct proc *cfs_current_proc - The current process running
	cfs_proc_timeslice_len - How much time is left in the time slice for the current process
	cfs_proc_timeslice_left - The full length of timeslice the running process wants

This project was to add in The files that have been updated:
	kernel/syscall.h
	kernel/syscall.c
	kernel/sysproc.c
	kernel/proc.h
	kernely/proc.c
	user/usys.pl
	user/user.h

xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Marcelo Arroyo, Silas Boyd-Wickizer, Anton Burtsev,
carlclone, Ian Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed,
Asami Doi,Wenyang Duan, eyalz800, Nelson Elhage, Saar Ettinger, Alice
Ferrazzi, Nathaniel Filardo, flespark, Peter Froehlich, Yakir Goaron,
Shivam Handa, Matt Harvey, Bryan Henry, jaichenhengjie, Jim Huang,
Matúš Jókay, John Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95,
Wolfgang Keller, Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim
Kolontsov, Austin Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu,
Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark
Morrissey, mtasm, Joel Nider, Hayato Ohhashi, OptimisticSide,
phosphagos, Harry Porter, Greg Price, RayAndrew, Jude Rich, segfault,
Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya Shigemitsu, snoire,
Taojie, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Alissa Tung,
Rafael Ubal, Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez,
Keiichi Watanabe, Lucas Wolf, Nicolas Wolovick, wxdao, Grant Wu, x653,
Jindong Zhang, Icenowy Zheng, ZhUyU1997, and Zou Chang Wei.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".
